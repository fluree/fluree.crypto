["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$fluree.crypto.secp256k1","~:imports",null,"~:requires",["^ ","~$ecc","~$sjcl.ecc","~$fluree.crypto.asn1","^=","~$alphabase.core","^>","~$sjcl.bn","^?","~$fluree.crypto.encodings","^@","^<","^<","~$codecBytes","~$sjcl.codec.bytes","~$fluree.crypto.sha2","^C","~$hmac","~$fluree.crypto.hmac","~$asn1","^=","~$sha2","^C","~$encodings","^@","^B","^B","^E","^E","~$bn","^?","~$alphabase","^>","~$sjcl.codec.hex","^K","~$codecHex","^K","~$ripemd","~$fluree.crypto.ripemd","^N","^N"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$public-key-from-private",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","~:line",72,"~:column",7,"~:end-line",72,"~:end-column",30,"~:arglists",["~#list",["~$quote",["^[",[["~$private"]]]]]],"^7","~$fluree.crypto.secp256k1/public-key-from-private","^U","src/fluree/crypto/secp256k1.cljc","^Y",30,"~:method-params",["^[",[["^11"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^W",1,"~:variadic?",false,"^V",72,"~:ret-tag","~$object","^X",72,"~:max-fixed-arity",1,"~:fn-var",true,"^Z",["^[",["^10",["^[",[["^11"]]]]]],"~$generate-key-pair*",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",126,"^W",7,"^X",126,"^Y",25,"^Z",["^[",["^10",["^[",[[],["^11"]]]]],"~:doc","Generates an internal representation of key pair from a secure random seed or provided private key.\n  Returns map/object with two keys:\n   - private  - a big number/integer\n   - public - a curve point\n\n   If a private key is provided, must be in either hex string or BigInteger (clj) bignumber (cljs).","~:top-fn",["^ ","^16",false,"~:fixed-arity",1,"^19",1,"^13",["^[",[[],["^11"]]],"^Z",["^[",[[],["^11"]]],"^15",["^[",[null,null]]]],"^7","~$fluree.crypto.secp256k1/generate-key-pair*","^U","src/fluree/crypto/secp256k1.cljc","^Y",25,"^1=",["^ ","^16",false,"^1>",1,"^19",1,"^13",["^[",[[],["^11"]]],"^Z",["^[",[[],["^11"]]],"^15",["^[",[null,null]]],"^13",["^[",[[],["^11"]]],"^14",null,"^1>",1,"^15",["^[",[null,null]],"^W",1,"^16",false,"~:methods",[["^ ","^1>",0,"^16",false,"~:tag","~$any"],["^ ","^1>",1,"^16",false,"^1A","^18"]],"^V",126,"^X",126,"^19",1,"^1:",true,"^Z",["^[",[[],["^11"]]],"^1<","Generates an internal representation of key pair from a secure random seed or provided private key.\n  Returns map/object with two keys:\n   - private  - a big number/integer\n   - public - a curve point\n\n   If a private key is provided, must be in either hex string or BigInteger (clj) bignumber (cljs)."],"~$verify-signature-from-hash",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",306,"^W",7,"^X",306,"^Y",33,"^Z",["^[",["^10",["^[",[["~$key","~$hash","~$signature"]]]]]],"^7","~$fluree.crypto.secp256k1/verify-signature-from-hash","^U","src/fluree/crypto/secp256k1.cljc","^Y",33,"^13",["^[",[["^1D","^1E","^1F"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",306,"^17","~$boolean","^X",306,"^19",3,"^1:",true,"^Z",["^[",["^10",["^[",[["^1D","^1E","^1F"]]]]]],"~$sign",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",234,"^W",16,"^X",234,"^Y",20,"~:export",true,"^Z",["^[",["^10",["^[",[["~$message","~$private-key"]]]]],"^1<","Sign some message with provided private key.\n  Message must be a byte-array or string.\n  Private key must be hex-encoded or a BigInteger(clj)/bignumber(cljs)."],"^7","~$fluree.crypto.secp256k1/sign","^U","src/fluree/crypto/secp256k1.cljc","^Y",20,"^13",["^[",[["^1K","^1L"]]],"^14",null,"^1J",true,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",234,"^17",["^6",["^1B","~$clj-nil"]],"^X",234,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["^1K","^1L"]]]]],"^1<","Sign some message with provided private key.\n  Message must be a byte-array or string.\n  Private key must be hex-encoded or a BigInteger(clj)/bignumber(cljs)."],"~$compute-recovery-byte",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",178,"^W",8,"^X",178,"^Y",29,"~:private",true,"^Z",["^[",["^10",["^[",[["~$kp","~$r","~$s"]]]]],"^1<","Compute a recovery byte for a compressed ECDSA signature given R and S parameters.\n  Returns value as byte integer."],"^1P",true,"^7","~$fluree.crypto.secp256k1/compute-recovery-byte","^U","src/fluree/crypto/secp256k1.cljc","^Y",29,"^13",["^[",[["^1Q","~$r","~$s"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",178,"^17","~$number","^X",178,"^19",3,"^1:",true,"^Z",["^[",["^10",["^[",[["^1Q","~$r","~$s"]]]]],"^1<","Compute a recovery byte for a compressed ECDSA signature given R and S parameters.\n  Returns value as byte integer."],"~$valid-private?",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",36,"^W",7,"^X",36,"^Y",21,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^1<","Returns true if private key, as big number/integer, is valid.\n  Private key must be >= 1 and <= curve modulus."],"^7","~$fluree.crypto.secp256k1/valid-private?","^U","src/fluree/crypto/secp256k1.cljc","^Y",21,"^13",["^[",[["^11"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",36,"^17","^1B","^X",36,"^19",1,"^1:",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^1<","Returns true if private key, as big number/integer, is valid.\n  Private key must be >= 1 and <= curve modulus."],"~$generate-key-pair",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^Y",33,"^1=",["^ ","^16",false,"^1>",1,"^19",1,"^13",["^[",[[],["^11"]]],"^Z",["^[",[[],["^11"]]],"^15",["^[",[null,null]]],"^1J",true,"^W",16,"^V",145,"^X",145,"^Z",["^[",["^10",["^[",[[],["^11"]]]]],"^1<","Returns key pair in hex format using X9.62 compressed encoding for public key."],"^7","~$fluree.crypto.secp256k1/generate-key-pair","^U","src/fluree/crypto/secp256k1.cljc","^Y",33,"^1=",["^ ","^16",false,"^1>",1,"^19",1,"^13",["^[",[[],["^11"]]],"^Z",["^[",[[],["^11"]]],"^15",["^[",[null,null]]],"^13",["^[",[[],["^11"]]],"^14",null,"^1>",1,"^1J",true,"^15",["^[",[null,null]],"^W",1,"^16",false,"^1@",[["^ ","^1>",0,"^16",false,"^1A","^1B"],["^ ","^1>",1,"^16",false,"^1A","^1B"]],"^V",145,"^X",145,"^19",1,"^1:",true,"^Z",["^[",[[],["^11"]]],"^1<","Returns key pair in hex format using X9.62 compressed encoding for public key."],"~$sign-hash",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",199,"^W",16,"^X",199,"^Y",25,"^1J",true,"^Z",["^[",["^10",["^[",[["~$hash-ba","~$private-bn","~$recovery-byte?"]]]]]],"^7","~$fluree.crypto.secp256k1/sign-hash","^U","src/fluree/crypto/secp256k1.cljc","^Y",25,"^13",["^[",[["^1Y","^1Z","^1["]]],"^14",null,"^1J",true,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",199,"^17",["^6",["^1B","^1N"]],"^X",199,"^19",3,"^1:",true,"^Z",["^[",["^10",["^[",[["^1Y","^1Z","^1["]]]]]],"~$secp256k1",["^ ","^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",28,"^W",20,"^X",28,"^Y",29,"^1P",true],"^1P",true,"^7","~$fluree.crypto.secp256k1/secp256k1","^U","src/fluree/crypto/secp256k1.cljc","^Y",29,"^W",1,"^V",28,"^X",28,"^1A","^1B"],"~$ecrecover",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",248,"^W",7,"^X",248,"^Y",16,"^Z",["^[",["^10",["^[",[["^1E","~$recovery-byte","~$r","~$s"]]]]],"^1<","Given the components of a signature and a recovery value,\n  recover and return the public key that generated the\n  signature according to the algorithm in SEC1v2 section 4.1.6\n\n  recovery-byte should be an integer byte."],"^7","~$fluree.crypto.secp256k1/ecrecover","^U","src/fluree/crypto/secp256k1.cljc","^Y",16,"^13",["^[",[["^1E","^24","~$r","~$s"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",248,"^17","^1B","^X",248,"^19",4,"^1:",true,"^Z",["^[",["^10",["^[",[["^1E","^24","~$r","~$s"]]]]],"^1<","Given the components of a signature and a recovery value,\n  recover and return the public key that generated the\n  signature according to the algorithm in SEC1v2 section 4.1.6\n\n  recovery-byte should be an integer byte."],"~$recover-public-key-from-hash",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",287,"^W",7,"^X",287,"^Y",35,"^Z",["^[",["^10",["^[",[["^1E","^1F"]]]]],"^1<","Recover a public key from a hash byte-array and signature (hex)."],"^7","~$fluree.crypto.secp256k1/recover-public-key-from-hash","^U","src/fluree/crypto/secp256k1.cljc","^Y",35,"^13",["^[",[["^1E","^1F"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",287,"^17","^1B","^X",287,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["^1E","^1F"]]]]],"^1<","Recover a public key from a hash byte-array and signature (hex)."],"~$format-key-pair",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",56,"^W",7,"^X",56,"^Y",22,"^Z",["^[",["^10",["^[",[["~$pair"]]]]],"^1<","Takes internal representation of a key-pair and returns X9.62 compressed encoded\n  public key and private key as a map, with each value hex encoded."],"^7","~$fluree.crypto.secp256k1/format-key-pair","^U","src/fluree/crypto/secp256k1.cljc","^Y",22,"^13",["^[",[["^29"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",56,"^17","^1B","^X",56,"^19",1,"^1:",true,"^Z",["^[",["^10",["^[",[["^29"]]]]],"^1<","Takes internal representation of a key-pair and returns X9.62 compressed encoded\n  public key and private key as a map, with each value hex encoded."],"~$get-sin-from-public-key",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",87,"^W",7,"^X",87,"^Y",30,"^Z",["^[",["^10",["^[",[["~$pub-key","~$&",["^ ","~:keys",["~$output-format"],"~:or",["^ ","^2>","~:base58"]]]]]]],"^1<","Generate a SIN from a public key","^1=",["^ ","^16",true,"^1>",1,"^19",1,"^13",[["^[",["^2<",["^ ","^2=",["^2>"],"^2?",["^ ","^2>","^2@"]]]]],"^Z",["^[",[["^2<","~$&",["^ ","^2=",["^2>"],"^2?",["^ ","^2>","^2@"]]]]],"^15",["^[",[null]]]],"^7","~$fluree.crypto.secp256k1/get-sin-from-public-key","^U","src/fluree/crypto/secp256k1.cljc","^Y",30,"^1=",["^ ","^16",true,"^1>",1,"^19",1,"^13",[["^[",["^2<",["^ ","^2=",["^2>"],"^2?",["^ ","^2>","^2@"]]]]],"^Z",["^[",[["^2<","~$&",["^ ","^2=",["^2>"],"^2?",["^ ","^2>","^2@"]]]]],"^15",["^[",[null]]],"^13",[["^[",["^2<",["^ ","^2=",["^2>"],"^2?",["^ ","^2>","^2@"]]]]],"^14",null,"^1>",1,"^15",["^[",[null]],"^W",1,"^16",true,"^1@",[["^ ","^1>",1,"^16",true,"^1A",["^6",["^1B","^1N"]]]],"^V",87,"^17","^1B","^X",87,"^19",1,"^1:",true,"^Z",["^[",[["^2<","~$&",["^ ","^2=",["^2>"],"^2?",["^ ","^2>","^2@"]]]]],"^1<","Generate a SIN from a public key"],"~$recover-public-key",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",297,"^W",7,"^X",297,"^Y",25,"^Z",["^[",["^10",["^[",[["~$input","^1F"]]]]],"^1<","Recover a public key from original message and signature (hex) of the\n  message's sha2-256 hash."],"^7","~$fluree.crypto.secp256k1/recover-public-key","^U","src/fluree/crypto/secp256k1.cljc","^Y",25,"^13",["^[",[["^2C","^1F"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",297,"^17","^1B","^X",297,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["^2C","^1F"]]]]],"^1<","Recover a public key from original message and signature (hex) of the\n  message's sha2-256 hash."],"~$deterministic-generate-k",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",152,"^W",7,"^X",152,"^Y",31,"^Z",["^[",["^10",["^[",[["^1Y","~$priv-key","~$curve"]]]]],"^1<","Deterministically generate a random number in accordance with RFC 6979.\n  Provided hash should have 256 bits to align with secp256k1 curve."],"^7","~$fluree.crypto.secp256k1/deterministic-generate-k","^U","src/fluree/crypto/secp256k1.cljc","^Y",31,"^13",["^[",[["^1Y","^2F","^2G"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",152,"^17","^1B","^X",152,"^19",3,"^1:",true,"^Z",["^[",["^10",["^[",[["^1Y","^2F","^2G"]]]]],"^1<","Deterministically generate a random number in accordance with RFC 6979.\n  Provided hash should have 256 bits to align with secp256k1 curve."],"~$format-public-key",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",46,"^W",7,"^X",46,"^Y",24,"^Z",["^[",["^10",["^[",[["~$public"]]]]],"^1<","Takes internal representation of a public key and returns X9.62 compressed encoded\npublic key, hex encoded."],"^7","~$fluree.crypto.secp256k1/format-public-key","^U","src/fluree/crypto/secp256k1.cljc","^Y",24,"^13",["^[",[["^2J"]]],"^14",null,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",46,"^17","^1B","^X",46,"^19",1,"^1:",true,"^Z",["^[",["^10",["^[",[["^2J"]]]]],"^1<","Takes internal representation of a public key and returns X9.62 compressed encoded\npublic key, hex encoded."],"~$verify",["^ ","^S",null,"^T",["^ ","^U","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/secp256k1.cljc","^V",324,"^W",16,"^X",324,"^Y",22,"^1J",true,"^Z",["^[",["^10",["^[",[["^2<","^1K","^1F"]]]]],"^1<","Verifies a message given a signature (in hex).\n  Assumes signature is DER-encoded with a recovery byte."],"^7","~$fluree.crypto.secp256k1/verify","^U","src/fluree/crypto/secp256k1.cljc","^Y",22,"^13",["^[",[["^2<","^1K","^1F"]]],"^14",null,"^1J",true,"^15",["^[",[null,null]],"^W",1,"^16",false,"^V",324,"^17","^1H","^X",324,"^19",3,"^1:",true,"^Z",["^[",["^10",["^[",[["^2<","^1K","^1F"]]]]],"^1<","Verifies a message given a signature (in hex).\n  Assumes signature is DER-encoded with a recovery byte."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:hash","~:R","~:key","^1P","~:else","~:signature","~:public","~:output-format","^2@","~:recover","~:S"]],"~:order",["^1P","^2V","^2W","^2@","^2X","~:R","~:S","^2T","^2S","^2R","^2U"]],"^1<",null]