["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$parseInt",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$fluree.crypto.encodings","~:imports",null,"~:requires",["^ ","~$ecc","~$sjcl.ecc","~$fluree.crypto.asn1","^>","~$alphabase.core","^?","~$sjcl.bn","^@","^=","^=","~$codecBytes","~$sjcl.codec.bytes","~$asn1","^>","^B","^B","~$bn","^@","~$str","~$clojure.string","~$alphabase","^?","^F","^F","~$sjcl.codec.hex","^H","~$codecHex","^H"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$hex->biginteger",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","~:line",40,"~:column",7,"~:end-line",40,"~:end-column",22,"~:arglists",["~#list",["~$quote",["^V",[["~$hex"]]]]],"~:doc","Return bytes of java.math.BigInteger (clj) or sjcl.bn (cljs)."],"^8","~$fluree.crypto.encodings/hex->biginteger","^P","src/fluree/crypto/encodings.cljc","^T",22,"~:method-params",["^V",[["^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"~:variadic?",false,"^Q",40,"~:ret-tag","~$any","^S",40,"~:max-fixed-arity",1,"~:fn-var",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","Return bytes of java.math.BigInteger (clj) or sjcl.bn (cljs)."],"~$biginteger->bytes",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",27,"^R",7,"^S",27,"^T",24,"^U",["^V",["^W",["^V",[["^D"],["^D","~$l"]]]]],"^Y","Return bytes of java.math.BigInteger (clj) or sjcl.bn (cljs).","~:top-fn",["^ ","^12",false,"~:fixed-arity",2,"^15",2,"^[",["^V",[["^D"],["^D","~$l"]]],"^U",["^V",[["^D"],["^D","~$l"]]],"^11",["^V",[null,null]]]],"^8","~$fluree.crypto.encodings/biginteger->bytes","^P","src/fluree/crypto/encodings.cljc","^T",24,"^18",["^ ","^12",false,"^19",2,"^15",2,"^[",["^V",[["^D"],["^D","~$l"]]],"^U",["^V",[["^D"],["^D","~$l"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^D"],["^D","~$l"]]],"^10",null,"^19",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"~:methods",[["^ ","^19",1,"^12",false,"~:tag","^14"],["^ ","^19",2,"^12",false,"^1<","^14"]],"^Q",27,"^S",27,"^15",2,"^16",true,"^U",["^V",[["^D"],["^D","~$l"]]],"^Y","Return bytes of java.math.BigInteger (clj) or sjcl.bn (cljs)."],"~$x962-encode",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",216,"^R",7,"^S",216,"^T",18,"^U",["^V",["^W",["^V",[["~$x-coord","~$y-coord"],["^1>","^1?","~$compressed?"]]]]],"^Y","Encodes x and y coords in hex to X9.62 with optional compression (default true).\n  x coords and y coords should be supplied in hex format.","^18",["^ ","^12",false,"^19",3,"^15",3,"^[",["^V",[["^1>","^1?"],["^1>","^1?","^1@"]]],"^U",["^V",[["^1>","^1?"],["^1>","^1?","^1@"]]],"^11",["^V",[null,null]]]],"^8","~$fluree.crypto.encodings/x962-encode","^P","src/fluree/crypto/encodings.cljc","^T",18,"^18",["^ ","^12",false,"^19",3,"^15",3,"^[",["^V",[["^1>","^1?"],["^1>","^1?","^1@"]]],"^U",["^V",[["^1>","^1?"],["^1>","^1?","^1@"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^1>","^1?"],["^1>","^1?","^1@"]]],"^10",null,"^19",3,"^11",["^V",[null,null]],"^R",1,"^12",false,"^1;",[["^ ","^19",2,"^12",false,"^1<","^14"],["^ ","^19",3,"^12",false,"^1<","~$string"]],"^Q",216,"^S",216,"^15",3,"^16",true,"^U",["^V",[["^1>","^1?"],["^1>","^1?","^1@"]]],"^Y","Encodes x and y coords in hex to X9.62 with optional compression (default true).\n  x coords and y coords should be supplied in hex format."],"~$compute-point",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",133,"^R",7,"^S",133,"^T",20,"^U",["^V",["^W",["^V",[["~$y-even?","~$x-coordinate","~$curve"]]]]],"^Y","Compute an elliptic curve point for a y-coordinate parity and x-coordinate"],"^8","~$fluree.crypto.encodings/compute-point","^P","src/fluree/crypto/encodings.cljc","^T",20,"^[",["^V",[["^1D","^1E","^1F"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",133,"^13","~$object","^S",133,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^1D","^1E","^1F"]]]]],"^Y","Compute an elliptic curve point for a y-coordinate parity and x-coordinate"],"~$biginteger->hex",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",21,"^R",7,"^S",21,"^T",22,"^U",["^V",["^W",["^V",[["^D"]]]]],"^Y","Hex-encode java.math.BigInteger (clj) or sjcl.bn (cljs)."],"^8","~$fluree.crypto.encodings/biginteger->hex","^P","src/fluree/crypto/encodings.cljc","^T",22,"^[",["^V",[["^D"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",21,"^13",["^7",[null,"^1B"]],"^S",21,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^D"]]]]],"^Y","Hex-encode java.math.BigInteger (clj) or sjcl.bn (cljs)."],"~$DER-encode-ECDSA-signature",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",289,"^R",7,"^S",289,"^T",33,"^U",["^V",["^W",["^V",[["~$R","~$S","~$recover","^1F"]]]]],"^Y","Create a DER encoded signature.\n  Both R and S should be bigintegers (clj) /bignumbers (cljs).\n  recover should also be biginteger"],"^8","~$fluree.crypto.encodings/DER-encode-ECDSA-signature","^P","src/fluree/crypto/encodings.cljc","^T",33,"^[",["^V",[["~$R","~$S","^1L","^1F"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",289,"^13",["^7",["~$js/Uint8Array","~$clj-nil"]],"^S",289,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["~$R","~$S","^1L","^1F"]]]]],"^Y","Create a DER encoded signature.\n  Both R and S should be bigintegers (clj) /bignumbers (cljs).\n  recover should also be biginteger"],"~$DER-decode-standard",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",235,"^R",8,"^S",235,"^T",27,"~:private",true,"^U",["^V",["^W",["^V",[["^C"]]]]],"^Y","Decodes an ordinary encoded list of numbers from a hexadecimal following the distinguished encoding rules. Returns R and S as bigintegers (clj). "],"^1Q",true,"^8","~$fluree.crypto.encodings/DER-decode-standard","^P","src/fluree/crypto/encodings.cljc","^T",27,"^[",["^V",[["^C"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",235,"^13","~$clj","^S",235,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^C"]]]]],"^Y","Decodes an ordinary encoded list of numbers from a hexadecimal following the distinguished encoding rules. Returns R and S as bigintegers (clj). "],"~$bn-even?",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",52,"^R",10,"^S",52,"^T",18,"^U",["^V",["^W",["^V",[["~$sjcl-bn"]]]]],"^Y","Tests is an sjcl.bn (cljs) is even. Returns boolean if so."],"^8","~$fluree.crypto.encodings/bn-even?","^P","src/fluree/crypto/encodings.cljc","^T",18,"^[",["^V",[["^1U"]]],"^10",null,"^11",["^V",[null,null]],"^R",4,"^12",false,"^Q",52,"^13","~$boolean","^S",52,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^1U"]]]]],"^Y","Tests is an sjcl.bn (cljs) is even. Returns boolean if so."],"~$DER-decode",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",258,"^R",7,"^S",258,"^T",17,"^U",["^V",["^W",["^V",[["^C"]]]]],"^Y","Decodes a list of numbers including an optional recovery byte, following BitCoin's convention"],"^8","~$fluree.crypto.encodings/DER-decode","^P","src/fluree/crypto/encodings.cljc","^T",17,"^[",["^V",[["^C"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",258,"^13","^1S","^S",258,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^C"]]]]],"^Y","Decodes a list of numbers including an optional recovery byte, following BitCoin's convention"],"~$x962-hex-compressed-decode",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",171,"^R",8,"^S",171,"^T",34,"^1Q",true,"^U",["^V",["^W",["^V",[["~$encoded-key","^1F"]]]]]],"^1Q",true,"^8","~$fluree.crypto.encodings/x962-hex-compressed-decode","^P","src/fluree/crypto/encodings.cljc","^T",34,"^[",["^V",[["^1[","^1F"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",171,"^13","^1H","^S",171,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^1[","^1F"]]]]]],"~$x962-decode",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",198,"^R",7,"^S",198,"^T",18,"^U",["^V",["^W",["^V",[["~$public-key","^1F"]]]]],"^Y","Decode a X9.62 encoded public key from hex"],"^8","~$fluree.crypto.encodings/x962-decode","^P","src/fluree/crypto/encodings.cljc","^T",18,"^[",["^V",[["^22","^1F"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",198,"^13","^1H","^S",198,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^22","^1F"]]]]],"^Y","Decode a X9.62 encoded public key from hex"],"~$byte->int",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",46,"^R",7,"^S",46,"^T",16,"^U",["^V",["^W",["^V",[["~$the-bytes"]]]]]],"^8","~$fluree.crypto.encodings/byte->int","^P","src/fluree/crypto/encodings.cljc","^T",16,"^[",["^V",[["^25"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",46,"^13","~$number","^S",46,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^25"]]]]]],"~$modular-square-root",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",64,"^R",10,"^S",64,"^T",29,"^U",["^V",["^W",["^V",[["~$n","~$modulus"]]]]],"^Y","Compute the square root of a number modulo a prime.\n     Number and modulus should be big numbers (bn)."],"^8","~$fluree.crypto.encodings/modular-square-root","^P","src/fluree/crypto/encodings.cljc","^T",29,"^[",["^V",[["~$n","^29"]]],"^10",null,"^11",["^V",[null,null]],"^R",4,"^12",false,"^Q",64,"^13","^14","^S",64,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$n","^29"]]]]],"^Y","Compute the square root of a number modulo a prime.\n     Number and modulus should be big numbers (bn)."],"~$DER-decode-ECDSA-signature",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",277,"^R",7,"^S",277,"^T",33,"^U",["^V",["^W",["^V",[["~$ecdsa"]]]]],"^Y","Formats an ECDSA signature from hex.\n  Returns R, S and recover as hex values."],"^8","~$fluree.crypto.encodings/DER-decode-ECDSA-signature","^P","src/fluree/crypto/encodings.cljc","^T",33,"^[",["^V",[["^2<"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",277,"^13","~$cljs.core/IMap","^S",277,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^2<"]]]]],"^Y","Formats an ECDSA signature from hex.\n  Returns R, S and recover as hex values."],"~$pad-hex",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",14,"^R",16,"^S",14,"^T",23,"~:export",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","Pads a hex value with a leading zero if odd."],"^8","~$fluree.crypto.encodings/pad-hex","^P","src/fluree/crypto/encodings.cljc","^T",23,"^[",["^V",[["^X"]]],"^10",null,"^2@",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",14,"^13",["^7",[null,"^1B"]],"^S",14,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","Pads a hex value with a leading zero if odd."],"~$bytes->biginteger",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",34,"^R",7,"^S",34,"^T",24,"^U",["^V",["^W",["^V",[["~$ba"]]]]],"^Y","Return bytes of java.math.BigInteger (clj) or sjcl.bn (cljs)."],"^8","~$fluree.crypto.encodings/bytes->biginteger","^P","src/fluree/crypto/encodings.cljc","^T",24,"^[",["^V",[["^2C"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",34,"^13","^14","^S",34,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^2C"]]]]],"^Y","Return bytes of java.math.BigInteger (clj) or sjcl.bn (cljs)."],"~$x962-hex-uncompressed-decode",["^ ","^N",null,"^O",["^ ","^P","/Users/bplatz/fluree/fluree.crypto/src/fluree/crypto/encodings.cljc","^Q",186,"^R",8,"^S",186,"^T",36,"^1Q",true,"^U",["^V",["^W",["^V",[["^1[","^1F"]]]]],"^Y","Decode a hex encoded public key into x and y coordinates as bytes."],"^1Q",true,"^8","~$fluree.crypto.encodings/x962-hex-uncompressed-decode","^P","src/fluree/crypto/encodings.cljc","^T",36,"^[",["^V",[["^1[","^1F"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",186,"^13","^1H","^S",186,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^1[","^1F"]]]]],"^Y","Decode a hex encoded public key into x and y coordinates as bytes."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~:full-asn1","~:R","~:else","~:remaining","~:decoded-header-length","~:argument","~:integer","~:modulus","~:length","~:recover","~:encoded-key","~:S","~:actual-length","~:message"]],"~:order",["^2L","^2O","^2Q","^2T","^2R","^2M","^2N","^2U","^2V","^2K","^2P","~:R","~:S","^2S"]],"^Y",null]