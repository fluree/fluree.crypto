["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$alphabase.codec","~:imports",null,"~:requires",["^ ","~$bytes","~$alphabase.bytes","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$pure-divide",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/codec.cljc","~:line",26,"~:column",8,"~:end-line",26,"~:end-column",19,"~:private",true,"~:arglists",["~#list",["~$quote",["^J",[["~$alphabet","~$data"]]]]],"~:doc","Pure implementation of radix division to calculate a sequence of\n  tokens from a byte array."],"^H",true,"^7","~$alphabase.codec/pure-divide","^C","resources/public/js/out/alphabase/codec.cljc","^G",19,"~:method-params",["^J",[["^L","^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^E",1,"~:variadic?",false,"^D",26,"~:ret-tag","~$cljs.core/LazySeq","^F",26,"~:max-fixed-arity",2,"~:fn-var",true,"^I",["^J",["^K",["^J",[["^L","^M"]]]]],"^N","Pure implementation of radix division to calculate a sequence of\n  tokens from a byte array."],"~$encode",["^ ","^A",null,"^B",["^ ","^C","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/codec.cljc","^D",59,"^E",7,"^F",59,"^G",13,"^I",["^J",["^K",["^J",[["^L","^M"]]]]],"^N","Encodes binary data using the given alphabet. Returns the encoded string, or\n  nil if the input is nil or empty."],"^7","~$alphabase.codec/encode","^C","resources/public/js/out/alphabase/codec.cljc","^G",13,"^P",["^J",[["^L","^M"]]],"^Q",null,"^R",["^J",[null,null]],"^E",1,"^S",false,"^D",59,"^T",["^6",["~$any","~$clj-nil"]],"^F",59,"^V",2,"^W",true,"^I",["^J",["^K",["^J",[["^L","^M"]]]]],"^N","Encodes binary data using the given alphabet. Returns the encoded string, or\n  nil if the input is nil or empty."],"~$pure-multiply",["^ ","^A",null,"^B",["^ ","^C","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/codec.cljc","^D",109,"^E",8,"^F",109,"^G",21,"^H",true,"^I",["^J",["^K",["^J",[["^L","~$tokens"]]]]],"^N","Pure implementation of radix multiplication to calculate a sequence of byte\n  values from a string of tokens."],"^H",true,"^7","~$alphabase.codec/pure-multiply","^C","resources/public/js/out/alphabase/codec.cljc","^G",21,"^P",["^J",[["^L","^11"]]],"^Q",null,"^R",["^J",[null,null]],"^E",1,"^S",false,"^D",109,"^T",["^6",[null,"~$seq","~$cljs.core/IList","^Z"]],"^F",109,"^V",2,"^W",true,"^I",["^J",["^K",["^J",[["^L","^11"]]]]],"^N","Pure implementation of radix multiplication to calculate a sequence of byte\n  values from a string of tokens."],"~$decode",["^ ","^A",null,"^B",["^ ","^C","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/codec.cljc","^D",147,"^E",7,"^F",147,"^G",13,"^I",["^J",["^K",["^J",[["^L","^11"]]]]],"^N","Decodes a string of alphabet tokens. Returns the decoded binary array, or nil\n  if the input is nil or empty."],"^7","~$alphabase.codec/decode","^C","resources/public/js/out/alphabase/codec.cljc","^G",13,"^P",["^J",[["^L","^11"]]],"^Q",null,"^R",["^J",[null,null]],"^E",1,"^S",false,"^D",147,"^T",["^6",["~$js/Uint8Array","^["]],"^F",147,"^V",2,"^W",true,"^I",["^J",["^K",["^J",[["^L","^11"]]]]],"^N","Decodes a string of alphabet tokens. Returns the decoded binary array, or nil\n  if the input is nil or empty."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:alphabet","~:token"]],"~:order",["^1<","^1="]],"^N","Core encoding and decoding functions for use with arbitrary bases."]