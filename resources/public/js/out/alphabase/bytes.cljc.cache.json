["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Uint8Array",["^ "],"~$Array",["^ "],"~$ArrayBuffer",["^ "],"~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$concat","~$byte-array","~$bytes?","~$compare"]],"~:name","~$alphabase.bytes","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$random-bytes",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","~:line",111,"~:column",7,"~:end-line",111,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^N",[["~$length"]]]]],"~:doc","Returns a byte array `length` bytes long with random content."],"^>","~$alphabase.bytes/random-bytes","^H","resources/public/js/out/alphabase/bytes.cljc","^L",19,"~:method-params",["^N",[["^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^J",1,"~:variadic?",false,"^I",111,"~:ret-tag","~$js/Uint8Array","^K",111,"~:max-fixed-arity",1,"~:fn-var",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns a byte array `length` bytes long with random content."],"~$copy",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",77,"^J",7,"^K",77,"^L",11,"^M",["^N",["^O",["^N",[["~$src"],["^10","~$dst","~$dst-offset"],["^10","~$src-offset","^11","^12","^P"]]]]],"^Q","Copies bytes from one array to another.\n\n  - If only a source is given, returns a full copy of the byte array.\n  - If a source and a destination with offset are given, copies all of the\n    bytes from the source into the destination at that offset. Returns the\n    number of bytes copied.\n  - If all arguments are given, copies `length` bytes from the source at the\n    given offset to the destination at its offset. Returns the number of bytes\n    copied.","~:top-fn",["^ ","^V",false,"~:fixed-arity",5,"^Y",5,"^S",["^N",[["^10"],["^10","^11","^12"],["^10","^13","^11","^12","^P"]]],"^M",["^N",[["^10"],["^10","^11","^12"],["^10","^13","^11","^12","^P"]]],"^U",["^N",[null,null,null]]]],"^>","~$alphabase.bytes/copy","^H","resources/public/js/out/alphabase/bytes.cljc","^L",11,"^14",["^ ","^V",false,"^15",5,"^Y",5,"^S",["^N",[["^10"],["^10","^11","^12"],["^10","^13","^11","^12","^P"]]],"^M",["^N",[["^10"],["^10","^11","^12"],["^10","^13","^11","^12","^P"]]],"^U",["^N",[null,null,null]]],"^S",["^N",[["^10"],["^10","^11","^12"],["^10","^13","^11","^12","^P"]]],"^T",null,"^15",5,"^U",["^N",[null,null,null]],"^J",1,"^V",false,"~:methods",[["^ ","^15",1,"^V",false,"~:tag","^X"],["^ ","^15",3,"^V",false,"^18","~$any"],["^ ","^15",5,"^V",false]],"^I",77,"^K",77,"^Y",5,"^Z",true,"^M",["^N",[["^10"],["^10","^11","^12"],["^10","^13","^11","^12","^P"]]],"^Q","Copies bytes from one array to another.\n\n  - If only a source is given, returns a full copy of the byte array.\n  - If a source and a destination with offset are given, copies all of the\n    bytes from the source into the destination at that offset. Returns the\n    number of bytes copied.\n  - If all arguments are given, copies `length` bytes from the source at the\n    given offset to the destination at its offset. Returns the number of bytes\n    copied."],"~$init-bytes",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",100,"^J",7,"^K",100,"^L",17,"^M",["^N",["^O",["^N",[["~$values"]]]]],"^Q","Initialize a new array with the given sequence of byte values."],"^>","~$alphabase.bytes/init-bytes","^H","resources/public/js/out/alphabase/bytes.cljc","^L",17,"^S",["^N",[["^1;"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",100,"^W","^X","^K",100,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^1;"]]]]],"^Q","Initialize a new array with the given sequence of byte values."],"~$bytes=",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",51,"^J",7,"^K",51,"^L",13,"^M",["^N",["^O",["^N",[["~$a","~$b"]]]]],"^Q","Returns true if two byte sequences are the same length and have the same\n  byte content."],"^>","~$alphabase.bytes/bytes=","^H","resources/public/js/out/alphabase/bytes.cljc","^L",13,"^S",["^N",[["~$a","~$b"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",51,"^W","~$boolean","^K",51,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["~$a","~$b"]]]]],"^Q","Returns true if two byte sequences are the same length and have the same\n  byte content."],"^:",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",162,"^J",7,"^K",162,"^L",13,"^M",["^N",["^O",["^N",[["~$&","~$arrs"]]]]],"^Q","Concatenate bytes arrays into a single new byte array.","^14",["^ ","^V",true,"^15",0,"^Y",0,"^S",[["^N",["^1@"]]],"^M",["^N",[["~$&","^1@"]]],"^U",["^N",[null]]]],"^>","~$alphabase.bytes/concat","^H","resources/public/js/out/alphabase/bytes.cljc","^L",13,"^14",["^ ","^V",true,"^15",0,"^Y",0,"^S",[["^N",["^1@"]]],"^M",["^N",[["~$&","^1@"]]],"^U",["^N",[null]]],"^S",[["^N",["^1@"]]],"^T",null,"^15",0,"^U",["^N",[null]],"^J",1,"^V",true,"^17",[["^ ","^15",0,"^V",true,"^18","^X"]],"^I",162,"^W","^19","^K",162,"^Y",0,"^Z",true,"^M",["^N",[["~$&","^1@"]]],"^Q","Concatenate bytes arrays into a single new byte array."],"~$from-byte",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",13,"^J",7,"^K",13,"^L",16,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^Q","Coerces a byte value to a number."],"^>","~$alphabase.bytes/from-byte","^H","resources/public/js/out/alphabase/bytes.cljc","^L",16,"^S",["^N",[["~$x"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",13,"^K",13,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^Q","Coerces a byte value to a number."],"^;",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",69,"^J",7,"^K",69,"^L",17,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Creates a new array to hold byte data."],"^>","~$alphabase.bytes/byte-array","^H","resources/public/js/out/alphabase/bytes.cljc","^L",17,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",69,"^W","^X","^K",69,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Creates a new array to hold byte data."],"~$get-byte",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",20,"^J",7,"^K",20,"^L",15,"^M",["^N",["^O",["^N",[["~$array","~$i"]]]]],"^Q","Reads a byte value out of an array and coerces it to a number."],"^>","~$alphabase.bytes/get-byte","^H","resources/public/js/out/alphabase/bytes.cljc","^L",15,"^S",["^N",[["^1F","~$i"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",20,"^W","^19","^K",20,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^1F","~$i"]]]]],"^Q","Reads a byte value out of an array and coerces it to a number."],"^<",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",40,"^J",7,"^K",40,"^L",13,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^Q","True if the argument is a byte array compatible with this library."],"^>","~$alphabase.bytes/bytes?","^H","resources/public/js/out/alphabase/bytes.cljc","^L",13,"^S",["^N",[["~$x"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",40,"^W","^1?","^K",40,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^Q","True if the argument is a byte array compatible with this library."],"~$set-byte",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",26,"^J",7,"^K",26,"^L",15,"^M",["^N",["^O",["^N",[["^1F","~$i","~$x"]]]]],"^Q","Sets a byte value in an array after coercing it from a number."],"^>","~$alphabase.bytes/set-byte","^H","resources/public/js/out/alphabase/bytes.cljc","^L",15,"^S",["^N",[["^1F","~$i","~$x"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",26,"^W","^19","^K",26,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^1F","~$i","~$x"]]]]],"^Q","Sets a byte value in an array after coercing it from a number."],"~$byte-seq",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",32,"^J",7,"^K",32,"^L",15,"^M",["^N",["^O",["^N",[["^1F"]]]]],"^Q","Return a sequence of the bytes in an array, after coercion."],"^>","~$alphabase.bytes/byte-seq","^H","resources/public/js/out/alphabase/bytes.cljc","^L",15,"^S",["^N",[["^1F"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",32,"^W",["^9",["~$cljs.core/LazySeq","~$clj-nil"]],"^K",32,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^1F"]]]]],"^Q","Return a sequence of the bytes in an array, after coercion."],"~$copy-slice",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",147,"^J",7,"^K",147,"^L",17,"^M",["^N",["^O",["^N",[["^10","~$offset","~$len"],["^10","^1P"]]]]],"^Q","Copy a slice (defined by offset, length) from a byte array.\n\n  Omitting the slice `len` argument will copy remainder of\n  `src` array from offset (e.g, `(- (alength src) offset)` bytes).","^14",["^ ","^V",false,"^15",3,"^Y",3,"^S",["^N",[["^10","^1P","^1Q"],["^10","^1P"]]],"^M",["^N",[["^10","^1P","^1Q"],["^10","^1P"]]],"^U",["^N",[null,null]]]],"^>","~$alphabase.bytes/copy-slice","^H","resources/public/js/out/alphabase/bytes.cljc","^L",17,"^14",["^ ","^V",false,"^15",3,"^Y",3,"^S",["^N",[["^10","^1P","^1Q"],["^10","^1P"]]],"^M",["^N",[["^10","^1P","^1Q"],["^10","^1P"]]],"^U",["^N",[null,null]]],"^S",["^N",[["^10","^1P","^1Q"],["^10","^1P"]]],"^T",null,"^15",3,"^U",["^N",[null,null]],"^J",1,"^V",false,"^17",[["^ ","^15",3,"^V",false,"^18","^X"],["^ ","^15",2,"^V",false,"^18","^X"]],"^I",147,"^K",147,"^Y",3,"^Z",true,"^M",["^N",[["^10","^1P","^1Q"],["^10","^1P"]]],"^Q","Copy a slice (defined by offset, length) from a byte array.\n\n  Omitting the slice `len` argument will copy remainder of\n  `src` array from offset (e.g, `(- (alength src) offset)` bytes)."],"^=",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",122,"^J",7,"^K",122,"^L",14,"^M",["^N",["^O",["^N",[["~$a","~$b"]]]]],"^Q","Lexicographically compares two byte-arrays for order. Returns a negative\n  number, zero, or a positive number if `a` is less than, equal to, or greater\n  than `b`, respectively.\n\n  This ranking compares each byte in the keys in order; the first byte which\n  differs determines the ordering; if the byte in `a` is less than the byte in\n  `b`, `a` ranks before `b`, and vice versa.\n\n  If the keys differ in length, and all the bytes in the shorter key match the\n  longer key, the shorter key ranks first."],"^>","~$alphabase.bytes/compare","^H","resources/public/js/out/alphabase/bytes.cljc","^L",14,"^S",["^N",[["~$a","~$b"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",122,"^W","~$number","^K",122,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["~$a","~$b"]]]]],"^Q","Lexicographically compares two byte-arrays for order. Returns a negative\n  number, zero, or a positive number if `a` is less than, equal to, or greater\n  than `b`, respectively.\n\n  This ranking compares each byte in the keys in order; the first byte which\n  differs determines the ordering; if the byte in `a` is less than the byte in\n  `b`, `a` ranks before `b`, and vice versa.\n\n  If the keys differ in length, and all the bytes in the shorter key match the\n  longer key, the shorter key ranks first."],"~$to-byte",["^ ","^F",null,"^G",["^ ","^H","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/bytes.cljc","^I",6,"^J",7,"^K",6,"^L",14,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^Q","Coerces a number to a byte value."],"^>","~$alphabase.bytes/to-byte","^H","resources/public/js/out/alphabase/bytes.cljc","^L",14,"^S",["^N",[["~$x"]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^V",false,"^I",6,"^K",6,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^Q","Coerces a number to a byte value."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^Q","Functions to generically handle byte arrays."]