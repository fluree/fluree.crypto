["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$parseInt",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$alphabase.hex","~:imports",null,"~:requires",["^ ","~$bytes","~$alphabase.bytes","^<","^<","~$str","~$clojure.string","^>","^>","~$set","~$clojure.set","^@","^@"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$encode",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","~:line",34,"~:column",7,"~:end-line",34,"~:end-column",13,"~:arglists",["~#list",["~$quote",["^M",[["~$data"]]]]],"~:doc","Converts a byte array into a lowercase hexadecimal string. Returns nil for\n  empty inputs."],"^7","~$alphabase.hex/encode","^G","resources/public/js/out/alphabase/hex.cljc","^K",13,"~:method-params",["^M",[["^O"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^I",1,"~:variadic?",false,"^H",34,"~:ret-tag",["^6",["~$any","~$clj-nil"]],"^J",34,"~:max-fixed-arity",1,"~:fn-var",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Converts a byte array into a lowercase hexadecimal string. Returns nil for\n  empty inputs."],"~$decode",["^ ","^E",null,"^F",["^ ","^G","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","^H",46,"^I",7,"^J",46,"^K",13,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Parses a hexadecimal string into a byte array. Ensures that the resulting\n  array is zero-padded to match the hex string length."],"^7","~$alphabase.hex/decode","^G","resources/public/js/out/alphabase/hex.cljc","^K",13,"^R",["^M",[["^O"]]],"^S",null,"^T",["^M",[null,null]],"^I",1,"^U",false,"^H",46,"^V",["^6",["~$js/Uint8Array","^X"]],"^J",46,"^Y",1,"^Z",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Parses a hexadecimal string into a byte array. Ensures that the resulting\n  array is zero-padded to match the hex string length."],"~$valid?",["^ ","^E",null,"^F",["^ ","^G","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","^H",89,"^I",7,"^J",89,"^K",13,"^L",["^M",["^N",["^M",[["~$value"]]]]],"^P","Returns true if the string is valid hexadecimal."],"^7","~$alphabase.hex/valid?","^G","resources/public/js/out/alphabase/hex.cljc","^K",13,"^R",["^M",[["^13"]]],"^S",null,"^T",["^M",[null,null]],"^I",1,"^U",false,"^H",89,"^V","~$boolean","^J",89,"^Y",1,"^Z",true,"^L",["^M",["^N",["^M",[["^13"]]]]],"^P","Returns true if the string is valid hexadecimal."],"~$validate",["^ ","^E",null,"^F",["^ ","^G","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","^H",66,"^I",7,"^J",66,"^K",15,"^L",["^M",["^N",["^M",[["^13"]]]]],"^P","Checks a string to determine whether it's well-formed hexadecimal. Returns\n  an error string if the argument is invalid."],"^7","~$alphabase.hex/validate","^G","resources/public/js/out/alphabase/hex.cljc","^K",15,"^R",["^M",[["^13"]]],"^S",null,"^T",["^M",[null,null]],"^I",1,"^U",false,"^H",66,"^V",["^6",["~$string","^X"]],"^J",66,"^Y",1,"^Z",true,"^L",["^M",["^N",["^M",[["^13"]]]]],"^P","Checks a string to determine whether it's well-formed hexadecimal. Returns\n  an error string if the argument is invalid."],"~$hex-chars",["^ ","^F",["^ ","^G","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","^H",7,"^I",14,"^J",7,"^K",23,"~:const",true],"^7","~$alphabase.hex/hex-chars","^G","resources/public/js/out/alphabase/hex.cljc","^K",23,"~:const-expr",["^ ","~:op","^1:","~:val","0123456789ABCDEFabcdef","~:env",["^ ","~:context","~:expr"],"~:form","0123456789ABCDEFabcdef","~:tag","^18"],"^I",1,"^1:",true,"^H",7,"^J",7,"^1C","^18"],"~$hex?",["^ ","^E",null,"^F",["^ ","^G","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","^H",11,"^I",7,"^J",11,"^K",11,"^L",["^M",["^N",["^M",[["~$x"]]]]],"^P","Test if input is hex char set."],"^7","~$alphabase.hex/hex?","^G","resources/public/js/out/alphabase/hex.cljc","^K",11,"^R",["^M",[["~$x"]]],"^S",null,"^T",["^M",[null,null]],"^I",1,"^U",false,"^H",11,"^V","^15","^J",11,"^Y",1,"^Z",true,"^L",["^M",["^N",["^M",[["~$x"]]]]],"^P","Test if input is hex char set."],"~$byte->hex",["^ ","^E",null,"^F",["^ ","^G","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","^H",17,"^I",7,"^J",17,"^K",16,"^L",["^M",["^N",["^M",[["^13"]]]]],"^P","Converts a single byte value to a two-character hex string."],"^7","~$alphabase.hex/byte->hex","^G","resources/public/js/out/alphabase/hex.cljc","^K",16,"^R",["^M",[["^13"]]],"^S",null,"^T",["^M",[null,null]],"^I",1,"^U",false,"^H",17,"^V",["^6",["^W","^18"]],"^J",17,"^Y",1,"^Z",true,"^L",["^M",["^N",["^M",[["^13"]]]]],"^P","Converts a single byte value to a two-character hex string."],"~$hex->byte",["^ ","^E",null,"^F",["^ ","^G","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","^H",27,"^I",7,"^J",27,"^K",16,"^L",["^M",["^N",["^M",[["~$hex"]]]]],"^P","Converts a two-character hex string into a byte value."],"^7","~$alphabase.hex/hex->byte","^G","resources/public/js/out/alphabase/hex.cljc","^K",16,"^R",["^M",[["^1I"]]],"^S",null,"^T",["^M",[null,null]],"^I",1,"^U",false,"^H",27,"^V","~$js","^J",27,"^Y",1,"^Z",true,"^L",["^M",["^N",["^M",[["^1I"]]]]],"^P","Converts a two-character hex string into a byte value."],"~$hex-set",["^ ","^F",["^ ","^G","/Users/bplatz/fluree/fluree.crypto/resources/public/js/out/alphabase/hex.cljc","^H",8,"^I",14,"^J",8,"^K",21,"^1:",true],"^7","~$alphabase.hex/hex-set","^G","resources/public/js/out/alphabase/hex.cljc","^K",21,"^I",1,"^1:",true,"^H",8,"^J",8,"^1C",["^6",["~$clj","^W","~$cljs.core/ISet","~$cljs.core/MetaFn","^X"]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:else"]],"~:order",["^1U"]],"^P","Functions to encode and decode bytes as hexadecimal."]